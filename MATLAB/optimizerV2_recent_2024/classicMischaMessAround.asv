%clear
%clc
%cd 'C:\Users\rakif\Box\DBF 2023-2024\Sim Dev'
%% Plotting Settings
c = [0.647 0.078 0.090;
     0.424 0.451 0.451;
     0.784 0.784 0.784;
     0 0.451 0.376;
     0 0.373 0.522;
     1 0.8 0];
set(0,'DefaultAxesColorOrder',c)
set(0,'defaultLineLineWidth',1.5)
%%
% Read column B of Inputs excel sheet
variables = readmatrix('optimizerV2_inputs.xlsx','Range','B:B');
Cd_min = variables(1); % from excel
Cl_max = variables(2); % from excel
g = 9.81;
k = variables(3); % from excel
eff_c = 0.75;
eff_e = 0.9;
mu = 0.04;
rho = 1.225;
lap_dist = 762;
eta_coeff = [variables(4) variables(5) variables(6) variables(7)]; % from excel
n = 25; %% Do not go above 40
%Constraints
TOFL_max = 30.48; % 100 ft
WL_max = 10*9.81; % 10 kg/m^2 wingloading (DEFINITELY A LIMITING FACTOR)
P_max = 2000; %
AR_min = 4; % Minimum Aspect Ratio is 4
b_max = 1.8288; % Maximum wingspan is 6 ft. We're assuming that we'll do the max wingspan possible
%S_max = 1; % 1 m^2 max

% Ground Mission Timing - ASSUMING CONSTANT TIME FOR NOW
% Time2change_config = 10; % s; Estimated time to change plane configuration from parking to flight and vice-versa
% Time2load_m2_payload = 30; % s; Estimated time to load entire m2 payload
% Time2unload_m2_payload = 30; % s; Estimated time to unload entire m2 paylaod, including crew (which is removed later)
% Time2secure_hatches_doors = 5; % s; Estimated time to secure hatches and doors
% Time2unsecure_hatches_doors = 5; % s; Estimated time to unsecure hatches and doors
% % BEST_CONFIG DEPENDS ON THESE 2 VALUES BELOW:
% Time2loadunload_passenger = 1;

Sweep_S = linspace(0.1, 1, n); % Wing Area
Sweep_M2 = linspace(0, 5, n); % M2 Payload
Sweep_M3 = linspace(0.02, 0.2494758, n); % M3 Payload
Sweep_v_max = linspace(15,45,n); % Cruise velocity
C = 100*3600; % Use max battery power
%Sweep_C = linspace(32,100,n)*3600;
% Coordinates go (S, M2, M3, v_max)
tic
[S, M2, M3, v_max] = ndgrid(Sweep_S, Sweep_M2, Sweep_M3, Sweep_v_max);

% For weight calculation details, see
% https://wudbf.slab.com/posts/aircraft-design-fundamentals-c0dukalq#huq51-weight-estimation
empty_fuel_tank = 0.02; % Assuming 2 empty .5 L poland spring
M2_X1 = 0.01; % Assuming X1 aircraft for M2 is very light
W2 = (4.28*S + 2.03 + M2_X1 + M2)*9.81;
W3 = (4.28*S + 2.03 + empty_fuel_tank + M3)*9.81;
WL2 = W2./S;
WL3 = W3./S;
T_c = W2.*(0.5*rho*Cd_min*v_max.^2./WL2 + k*2./(rho*v_max.^2).*WL2);
P = T_c.*v_max/(eff_c*eff_e);
AR = b_max^2/S; % Assuming we're using maximum wingspan of 6 ft
v_lof2 = 1.556*sqrt(WL2/(rho*Cl_max));
v_lof3 = 1.556*sqrt(WL3/(rho*Cl_max));
T_lof2 = 1.414*eff_e*P.*polyval(eta_coeff,v_lof2./v_max/1.414)./v_lof2;
T_lof3 = 1.414*eff_e*P.*polyval(eta_coeff,v_lof3./v_max/1.414)./v_lof3;
S_g2 = (W2.*v_lof2.^2)./(2*g*(T_lof2 - 0.5*Cd_min*rho.*S.*v_lof2.^2 - mu*(W2 - 0.5*Cl_max*rho.*S.*v_lof2.^2)));
S_g3 = (W3.*v_lof3.^2)./(2*g*(T_lof3 - 0.5*Cd_min*rho.*S.*v_lof3.^2 - mu*(W3 - 0.5*Cl_max*rho.*S.*v_lof3.^2)));

laps = (v_max.*min(300, C./P)/lap_dist);

M2raw = M2.*v_max;
bonus_box_score = 1; % Should also test when it equals 2.5 instead of 1;
M3raw = laps + bonus_box_score/M3;
%GMraw = (Time2change_config*2 + Time2secure_hatches_doors*2 + ...
%    Time2unsecure_hatches_doors*2 + Time2load_m2_payload + ...
%    Time2unload_m2_payload + passengers*(Time2loadunload_passenger));
%GMScore = GMraw;
M2Score = M2raw;
M3Score = M3raw;

TOFL_constraint = S_g2 > TOFL_max | S_g3 > TOFL_max;
WL_constraint = WL2 > WL_max | WL3 > WL_max;
P_constraint = P > P_max;
lap_constraint = C./P.*v_max < 3.5*lap_dist;
AR_constraint = AR < AR_min;
%S_constraint = S > S_max;
all_constraint = TOFL_constraint | WL_constraint | P_constraint | lap_constraint | AR_constraint;

%GMScore(all_constraint) = NaN;
M2Score(all_constraint) = NaN;
M3Score(all_constraint) = NaN;
%GMraw = (min(GMScore,[],'all'))./GMraw;
max(M2Score,[],'all')
max(M3Score,[],'all')
M2raw = M2raw/(max(M2Score,[],'all'));
M3raw = M3raw/(max(M3Score,[],'all'));
%GMScore = (min(GMScore,[],'all'))./GMScore;
M2Score = M2Score/(max(M2Score,[],'all'));
M3Score = M3Score/(max(M3Score,[],'all'));
%Raw = M2raw + M3raw + GMraw; - What is point of this?
Raw = M3raw + M3raw;
%Score = M2Score + M3Score + GMScore;
Score = M2Score + M3Score;
[maxScore, idx] = max(Score,[],'all');

[S_i, M2_i, M3_i, v_max_i] = ind2sub(size(Score),idx);
best_config_idx = [S_i, M2_i, M3_i, v_max_i];
best_S = Sweep_S(S_i); 
best_M2 = Sweep_M2(M2_i);
best_M3 = Sweep_M3(M3_i);
best_v_max = Sweep_v_max(v_max_i);
best_config = [best_S, best_M2, best_M3, best_v_max];
req_Power = P(best_config_idx(1), best_config_idx(2), best_config_idx(3), best_config_idx(4));
req_AR = AR(best_config_idx(1), best_config_idx(2), best_config_idx(3), best_config_idx(4));
req_ST = req_Power*polyval(eta_coeff,0.01)/(0.01*best_config(3))/9.81;
AUW = W2(best_config_idx(1), best_config_idx(2), best_config_idx(3), best_config_idx(4))/9.81;
flight_time = C/req_Power/60;
req_laps = laps(best_config_idx(1), best_config_idx(2), best_config_idx(3), best_config_idx(4));
v_stall = v_lof2(best_config_idx(1), best_config_idx(2), best_config_idx(3), best_config_idx(4));
T_cruise = T_c(best_config_idx(1), best_config_idx(2), best_config_idx(3), best_config_idx(4));
% Round outputs for excel table
best_S = round(best_S,4);
best_M2 = round(best_M2,4);
best_M3 = round(best_M3,4);
best_v_max = round(best_v_max,4);
req_Power = round(req_Power,4);
req_AR = round(req_AR, 4);
req_ST = round(req_ST,4);
AUW = round(AUW,4);
flight_time = round(flight_time,4);
req_laps = round(req_laps,4);
v_stall = round(v_stall,4);
% All of these outputs should go to an excel sheet
T = table(best_S,best_M2,best_M3,best_v_max,req_Power,req_AR,req_ST,AUW,flight_time,req_laps,v_stall);
T = rows2vars(T); % transpose
filename = 'optimizerV2_outputs.xlsx';
writetable(T,filename)
toc
%% Plotting - Section not done(?) are we actually gonna do this(?)
% c = [0.647 0.078 0.09; 0.424 0.451 0.451];
% 
% [S_i, W_p_i, v_max_i, passenger_i, C_i] = ind2sub(size(Score),idx);
% [S_i, M2_i, M3_i, v_max_i] = ind2sub(size(Score),idx);
% 
query = 0.8:0.005:1.2;
% vmax
v_diff = squeeze(Raw(S_i,M2_i,M3_i, :))/Raw(S_i,M2_i,M3_i, v_max_i);
v_diff = spline(Sweep_v_max(:)/Sweep_v_max(v_max_i), v_diff, query);
% 
M2_diff = squeeze(Raw(S_i,:,M3_i, v_max_i))/Raw(S_i,M2_i,M3_i, v_max_i);
M2_diff = spline(squeeze(M2(S_i,:,M3_i, v_max_i))/M2(S_i, M2_i, M3_i, v_max_i), M2_diff, query);

M3_diff = squeeze(Raw(S_i,M2_i,:, v_max_i))/Raw(S_i,M2_i,M3_i, v_max_i);
M3_diff = spline(squeeze(M3(S_i,M2_i,:, v_max_i))/M3(S_i, M2_i, M3_i, v_max_i), M3_diff, query);
% 
% C_i variable
% C_diff = squeeze(Raw(S_i,M2_i,v_max_i,passenger_i,:))/Raw(S_i,M2_i,v_max_i,passenger_i, C_i);
% C_diff = spline(Sweep_C(:)/Sweep_C(C_i), C_diff, query);
% 
figure
hold on
plot(query, v_diff)
%plot(query,M2_diff)
plot(Sweep_M2(:)/Sweep_M2(M2_i), squeeze(Raw(S_i,:,v_max_i,passenger_i, C_i))/Raw(S_i,M2_i,v_max_i,passenger_i, C_i))
plot(query,M3_diff)
% plot(Sweep_passengers(:)/Sweep_passengers(passenger_i), squeeze(Raw(S_i,M2_i,v_max_i,:,C_i))/Raw(S_i,M2_i,v_max_i,passenger_i, C_i))
% plot(query, C_diff)
xlim([0.8 1.2])
hold off
% 
legend('v_{max}', 'M2 Payload', 'M3 Payload', 'Location','best');
xlabel('Fractional Change in Scoring Variable');
ylabel('Fractional Change in Score')
% 
% set(0, "DefaultAxesColorOrder", c)

% surf(Sweep_passengers,Sweep_M2,squeeze(Score(best_config_idx(1),:,best_config_idx(3),:)));